
Buttons_Switches.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002568  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002698  08002698  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002698  08002698  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002698  08002698  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080026a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000054  080026f4  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080026f4  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091a2  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aac  00000000  00000000  0002921f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b69  00000000  00000000  0002bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b230  00000000  00000000  00042b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082492  00000000  00000000  0004dd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d021b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  000d0270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	0800265c 	.word	0x0800265c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	0800265c 	.word	0x0800265c

0800014c <isButtonPressed>:

int TimeOutForKeyPress[NUM_BUTTON] = {200, 200, 200};
int button1_long_pressed = 0;
int button_flag[10];

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000008c 	.word	0x2000008c

08000180 <getKeyInput>:
void subKeyProcess(){
	//TODO
//	button1_flag = 1;
}

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; ++i) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e085      	b.n	8000298 <getKeyInput+0x118>
		KeyReg0[i] = KeyReg1[i];
 800018c:	4a47      	ldr	r2, [pc, #284]	; (80002ac <getKeyInput+0x12c>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4946      	ldr	r1, [pc, #280]	; (80002b0 <getKeyInput+0x130>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800019c:	4a45      	ldr	r2, [pc, #276]	; (80002b4 <getKeyInput+0x134>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4941      	ldr	r1, [pc, #260]	; (80002ac <getKeyInput+0x12c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	d01b      	beq.n	80001ea <getKeyInput+0x6a>
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dc21      	bgt.n	80001fc <getKeyInput+0x7c>
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d003      	beq.n	80001c6 <getKeyInput+0x46>
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d009      	beq.n	80001d8 <getKeyInput+0x58>
 80001c4:	e01a      	b.n	80001fc <getKeyInput+0x7c>
		case 0:
			KeyReg2[0] = HAL_GPIO_ReadPin(MODULE_GPIO_Port, MODULE_Pin);
 80001c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ca:	483b      	ldr	r0, [pc, #236]	; (80002b8 <getKeyInput+0x138>)
 80001cc:	f001 fa1a 	bl	8001604 <HAL_GPIO_ReadPin>
 80001d0:	4603      	mov	r3, r0
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b37      	ldr	r3, [pc, #220]	; (80002b4 <getKeyInput+0x134>)
 80001d6:	601a      	str	r2, [r3, #0]
		case 1:
			KeyReg2[1] = HAL_GPIO_ReadPin(TIME_GPIO_Port, TIME_Pin);
 80001d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001dc:	4837      	ldr	r0, [pc, #220]	; (80002bc <getKeyInput+0x13c>)
 80001de:	f001 fa11 	bl	8001604 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b33      	ldr	r3, [pc, #204]	; (80002b4 <getKeyInput+0x134>)
 80001e8:	605a      	str	r2, [r3, #4]
		case 2:
			KeyReg2[2] = HAL_GPIO_ReadPin(VALUE_GPIO_Port, VALUE_Pin);
 80001ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ee:	4833      	ldr	r0, [pc, #204]	; (80002bc <getKeyInput+0x13c>)
 80001f0:	f001 fa08 	bl	8001604 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b2e      	ldr	r3, [pc, #184]	; (80002b4 <getKeyInput+0x134>)
 80001fa:	609a      	str	r2, [r3, #8]
		}

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001fc:	4a2c      	ldr	r2, [pc, #176]	; (80002b0 <getKeyInput+0x130>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000204:	4929      	ldr	r1, [pc, #164]	; (80002ac <getKeyInput+0x12c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020c:	429a      	cmp	r2, r3
 800020e:	d140      	bne.n	8000292 <getKeyInput+0x112>
 8000210:	4a26      	ldr	r2, [pc, #152]	; (80002ac <getKeyInput+0x12c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4926      	ldr	r1, [pc, #152]	; (80002b4 <getKeyInput+0x134>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000220:	429a      	cmp	r2, r3
 8000222:	d136      	bne.n	8000292 <getKeyInput+0x112>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000224:	4a26      	ldr	r2, [pc, #152]	; (80002c0 <getKeyInput+0x140>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	4921      	ldr	r1, [pc, #132]	; (80002b4 <getKeyInput+0x134>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d018      	beq.n	800026a <getKeyInput+0xea>
				KeyReg3[i] = KeyReg2[i];
 8000238:	4a1e      	ldr	r2, [pc, #120]	; (80002b4 <getKeyInput+0x134>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	491f      	ldr	r1, [pc, #124]	; (80002c0 <getKeyInput+0x140>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 8000248:	4a1a      	ldr	r2, [pc, #104]	; (80002b4 <getKeyInput+0x134>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d11e      	bne.n	8000292 <getKeyInput+0x112>
					TimeOutForKeyPress[i] = 200;
 8000254:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <getKeyInput+0x144>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	21c8      	movs	r1, #200	; 0xc8
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[i] = 1;
 800025e:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <getKeyInput+0x148>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2101      	movs	r1, #1
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000268:	e013      	b.n	8000292 <getKeyInput+0x112>
				}
			}
			else {
				TimeOutForKeyPress[i]--;
 800026a:	4a16      	ldr	r2, [pc, #88]	; (80002c4 <getKeyInput+0x144>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	1e5a      	subs	r2, r3, #1
 8000274:	4913      	ldr	r1, [pc, #76]	; (80002c4 <getKeyInput+0x144>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800027c:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <getKeyInput+0x144>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d104      	bne.n	8000292 <getKeyInput+0x112>
					KeyReg3[i] = NORMAL_STATE;
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <getKeyInput+0x140>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2101      	movs	r1, #1
 800028e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTON; ++i) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3301      	adds	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b02      	cmp	r3, #2
 800029c:	f77f af76 	ble.w	800018c <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000018 	.word	0x20000018
 80002b8:	40011000 	.word	0x40011000
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	20000024 	.word	0x20000024
 80002c4:	20000030 	.word	0x20000030
 80002c8:	2000008c 	.word	0x2000008c

080002cc <display7SEG>:
#include "display7SEG.h"

int index_led = 0;
int led_buffer[4];

void display7SEG(int num) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b09      	cmp	r3, #9
 80002d8:	d87e      	bhi.n	80003d8 <display7SEG+0x10c>
 80002da:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <display7SEG+0x14>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	08000309 	.word	0x08000309
 80002e4:	0800031f 	.word	0x0800031f
 80002e8:	08000335 	.word	0x08000335
 80002ec:	0800034b 	.word	0x0800034b
 80002f0:	08000361 	.word	0x08000361
 80002f4:	08000377 	.word	0x08000377
 80002f8:	0800038d 	.word	0x0800038d
 80002fc:	080003a3 	.word	0x080003a3
 8000300:	080003b7 	.word	0x080003b7
 8000304:	080003c3 	.word	0x080003c3
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	213f      	movs	r1, #63	; 0x3f
 800030c:	4834      	ldr	r0, [pc, #208]	; (80003e0 <display7SEG+0x114>)
 800030e:	f001 f990 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, g_Pin, 1);
 8000312:	2201      	movs	r2, #1
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	4832      	ldr	r0, [pc, #200]	; (80003e0 <display7SEG+0x114>)
 8000318:	f001 f98b 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 800031c:	e05c      	b.n	80003d8 <display7SEG+0x10c>
	case 1:
		HAL_GPIO_WritePin(GPIOB, b_Pin | c_Pin, 0);
 800031e:	2200      	movs	r2, #0
 8000320:	2106      	movs	r1, #6
 8000322:	482f      	ldr	r0, [pc, #188]	; (80003e0 <display7SEG+0x114>)
 8000324:	f001 f985 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a_Pin | d_Pin | e_Pin | f_Pin | g_Pin, 1);
 8000328:	2201      	movs	r2, #1
 800032a:	2179      	movs	r1, #121	; 0x79
 800032c:	482c      	ldr	r0, [pc, #176]	; (80003e0 <display7SEG+0x114>)
 800032e:	f001 f980 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 8000332:	e051      	b.n	80003d8 <display7SEG+0x10c>
	case 2:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | d_Pin | e_Pin | g_Pin, 0);
 8000334:	2200      	movs	r2, #0
 8000336:	215b      	movs	r1, #91	; 0x5b
 8000338:	4829      	ldr	r0, [pc, #164]	; (80003e0 <display7SEG+0x114>)
 800033a:	f001 f97a 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, c_Pin | f_Pin, 1);
 800033e:	2201      	movs	r2, #1
 8000340:	2124      	movs	r1, #36	; 0x24
 8000342:	4827      	ldr	r0, [pc, #156]	; (80003e0 <display7SEG+0x114>)
 8000344:	f001 f975 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 8000348:	e046      	b.n	80003d8 <display7SEG+0x10c>
	case 3:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | g_Pin, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	214f      	movs	r1, #79	; 0x4f
 800034e:	4824      	ldr	r0, [pc, #144]	; (80003e0 <display7SEG+0x114>)
 8000350:	f001 f96f 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e_Pin | f_Pin, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	2130      	movs	r1, #48	; 0x30
 8000358:	4821      	ldr	r0, [pc, #132]	; (80003e0 <display7SEG+0x114>)
 800035a:	f001 f96a 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 800035e:	e03b      	b.n	80003d8 <display7SEG+0x10c>
	case 4:
		HAL_GPIO_WritePin(GPIOB, b_Pin | c_Pin | f_Pin | g_Pin, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2166      	movs	r1, #102	; 0x66
 8000364:	481e      	ldr	r0, [pc, #120]	; (80003e0 <display7SEG+0x114>)
 8000366:	f001 f964 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a_Pin | d_Pin | e_Pin, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	2119      	movs	r1, #25
 800036e:	481c      	ldr	r0, [pc, #112]	; (80003e0 <display7SEG+0x114>)
 8000370:	f001 f95f 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 8000374:	e030      	b.n	80003d8 <display7SEG+0x10c>
	case 5:
		HAL_GPIO_WritePin(GPIOB, a_Pin | c_Pin | d_Pin | f_Pin | g_Pin, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	216d      	movs	r1, #109	; 0x6d
 800037a:	4819      	ldr	r0, [pc, #100]	; (80003e0 <display7SEG+0x114>)
 800037c:	f001 f959 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b_Pin | e_Pin, 1);
 8000380:	2201      	movs	r2, #1
 8000382:	2112      	movs	r1, #18
 8000384:	4816      	ldr	r0, [pc, #88]	; (80003e0 <display7SEG+0x114>)
 8000386:	f001 f954 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 800038a:	e025      	b.n	80003d8 <display7SEG+0x10c>
	case 6:
		HAL_GPIO_WritePin(GPIOB, a_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	217d      	movs	r1, #125	; 0x7d
 8000390:	4813      	ldr	r0, [pc, #76]	; (80003e0 <display7SEG+0x114>)
 8000392:	f001 f94e 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b_Pin, 1);
 8000396:	2201      	movs	r2, #1
 8000398:	2102      	movs	r1, #2
 800039a:	4811      	ldr	r0, [pc, #68]	; (80003e0 <display7SEG+0x114>)
 800039c:	f001 f949 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 80003a0:	e01a      	b.n	80003d8 <display7SEG+0x10c>
	case 7:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2107      	movs	r1, #7
 80003a6:	480e      	ldr	r0, [pc, #56]	; (80003e0 <display7SEG+0x114>)
 80003a8:	f001 f943 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, d_Pin | e_Pin | f_Pin | g_Pin, 1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2178      	movs	r1, #120	; 0x78
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <display7SEG+0x114>)
 80003b2:	f001 f93e 	bl	8001632 <HAL_GPIO_WritePin>
	case 8:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	217f      	movs	r1, #127	; 0x7f
 80003ba:	4809      	ldr	r0, [pc, #36]	; (80003e0 <display7SEG+0x114>)
 80003bc:	f001 f939 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 80003c0:	e00a      	b.n	80003d8 <display7SEG+0x10c>
	case 9:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | f_Pin | g_Pin, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	216f      	movs	r1, #111	; 0x6f
 80003c6:	4806      	ldr	r0, [pc, #24]	; (80003e0 <display7SEG+0x114>)
 80003c8:	f001 f933 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e_Pin, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <display7SEG+0x114>)
 80003d2:	f001 f92e 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 80003d6:	bf00      	nop
	}
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40010c00 	.word	0x40010c00

080003e4 <display7SEG_2>:

void display7SEG_2(int num) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b09      	cmp	r3, #9
 80003f0:	f200 8093 	bhi.w	800051a <display7SEG_2+0x136>
 80003f4:	a201      	add	r2, pc, #4	; (adr r2, 80003fc <display7SEG_2+0x18>)
 80003f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fa:	bf00      	nop
 80003fc:	08000425 	.word	0x08000425
 8000400:	0800043f 	.word	0x0800043f
 8000404:	08000459 	.word	0x08000459
 8000408:	08000473 	.word	0x08000473
 800040c:	0800048d 	.word	0x0800048d
 8000410:	080004a7 	.word	0x080004a7
 8000414:	080004c1 	.word	0x080004c1
 8000418:	080004db 	.word	0x080004db
 800041c:	080004f3 	.word	0x080004f3
 8000420:	08000501 	.word	0x08000501
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800042a:	483e      	ldr	r0, [pc, #248]	; (8000524 <display7SEG_2+0x140>)
 800042c:	f001 f901 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, g2_Pin, 1);
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	483b      	ldr	r0, [pc, #236]	; (8000524 <display7SEG_2+0x140>)
 8000438:	f001 f8fb 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 800043c:	e06d      	b.n	800051a <display7SEG_2+0x136>
	case 1:
		HAL_GPIO_WritePin(GPIOB, b2_Pin | c2_Pin, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000444:	4837      	ldr	r0, [pc, #220]	; (8000524 <display7SEG_2+0x140>)
 8000446:	f001 f8f4 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin, 1);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 8000450:	4834      	ldr	r0, [pc, #208]	; (8000524 <display7SEG_2+0x140>)
 8000452:	f001 f8ee 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 8000456:	e060      	b.n	800051a <display7SEG_2+0x136>
	case 2:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | d2_Pin | e2_Pin | g2_Pin, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 800045e:	4831      	ldr	r0, [pc, #196]	; (8000524 <display7SEG_2+0x140>)
 8000460:	f001 f8e7 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, c2_Pin | f2_Pin, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800046a:	482e      	ldr	r0, [pc, #184]	; (8000524 <display7SEG_2+0x140>)
 800046c:	f001 f8e1 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 8000470:	e053      	b.n	800051a <display7SEG_2+0x136>
	case 3:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | g2_Pin, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8000478:	482a      	ldr	r0, [pc, #168]	; (8000524 <display7SEG_2+0x140>)
 800047a:	f001 f8da 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e2_Pin | f2_Pin, 1);
 800047e:	2201      	movs	r2, #1
 8000480:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000484:	4827      	ldr	r0, [pc, #156]	; (8000524 <display7SEG_2+0x140>)
 8000486:	f001 f8d4 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 800048a:	e046      	b.n	800051a <display7SEG_2+0x136>
	case 4:
		HAL_GPIO_WritePin(GPIOB, b2_Pin | c2_Pin | f2_Pin | g2_Pin, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8000492:	4824      	ldr	r0, [pc, #144]	; (8000524 <display7SEG_2+0x140>)
 8000494:	f001 f8cd 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a2_Pin | d2_Pin | e2_Pin, 1);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800049e:	4821      	ldr	r0, [pc, #132]	; (8000524 <display7SEG_2+0x140>)
 80004a0:	f001 f8c7 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 80004a4:	e039      	b.n	800051a <display7SEG_2+0x136>
	case 5:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | c2_Pin | d2_Pin | f2_Pin | g2_Pin, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 80004ac:	481d      	ldr	r0, [pc, #116]	; (8000524 <display7SEG_2+0x140>)
 80004ae:	f001 f8c0 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b2_Pin | e2_Pin, 1);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80004b8:	481a      	ldr	r0, [pc, #104]	; (8000524 <display7SEG_2+0x140>)
 80004ba:	f001 f8ba 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 80004be:	e02c      	b.n	800051a <display7SEG_2+0x136>
	case 6:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80004c6:	4817      	ldr	r0, [pc, #92]	; (8000524 <display7SEG_2+0x140>)
 80004c8:	f001 f8b3 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b2_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d2:	4814      	ldr	r0, [pc, #80]	; (8000524 <display7SEG_2+0x140>)
 80004d4:	f001 f8ad 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 80004d8:	e01f      	b.n	800051a <display7SEG_2+0x136>
	case 7:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 7160 	mov.w	r1, #896	; 0x380
 80004e0:	4810      	ldr	r0, [pc, #64]	; (8000524 <display7SEG_2+0x140>)
 80004e2:	f001 f8a6 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, d2_Pin | e2_Pin | f2_Pin | g2_Pin, 1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <display7SEG_2+0x140>)
 80004ee:	f001 f8a0 	bl	8001632 <HAL_GPIO_WritePin>
	case 8:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80004f8:	480a      	ldr	r0, [pc, #40]	; (8000524 <display7SEG_2+0x140>)
 80004fa:	f001 f89a 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 80004fe:	e00c      	b.n	800051a <display7SEG_2+0x136>
	case 9:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | f2_Pin | g2_Pin, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <display7SEG_2+0x140>)
 8000508:	f001 f893 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e2_Pin, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <display7SEG_2+0x140>)
 8000514:	f001 f88d 	bl	8001632 <HAL_GPIO_WritePin>
		break;
 8000518:	bf00      	nop
	}
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010c00 	.word	0x40010c00

08000528 <update7SEG>:

void update7SEG(int index){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    switch (index){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <update7SEG+0x16>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d017      	beq.n	800056c <update7SEG+0x44>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
			display7SEG(led_buffer[1]);
			display7SEG_2(led_buffer[3]);
            break;
        default:
            break;
 800053c:	e02d      	b.n	800059a <update7SEG+0x72>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000544:	4817      	ldr	r0, [pc, #92]	; (80005a4 <update7SEG+0x7c>)
 8000546:	f001 f874 	bl	8001632 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000550:	4814      	ldr	r0, [pc, #80]	; (80005a4 <update7SEG+0x7c>)
 8000552:	f001 f86e 	bl	8001632 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[0]);
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <update7SEG+0x80>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff feb6 	bl	80002cc <display7SEG>
            display7SEG_2(led_buffer[2]);
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <update7SEG+0x80>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff3d 	bl	80003e4 <display7SEG_2>
            break;
 800056a:	e016      	b.n	800059a <update7SEG+0x72>
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000572:	480c      	ldr	r0, [pc, #48]	; (80005a4 <update7SEG+0x7c>)
 8000574:	f001 f85d 	bl	8001632 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057e:	4809      	ldr	r0, [pc, #36]	; (80005a4 <update7SEG+0x7c>)
 8000580:	f001 f857 	bl	8001632 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <update7SEG+0x80>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe9f 	bl	80002cc <display7SEG>
			display7SEG_2(led_buffer[3]);
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <update7SEG+0x80>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff26 	bl	80003e4 <display7SEG_2>
            break;
 8000598:	bf00      	nop
    }
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010800 	.word	0x40010800
 80005a8:	200000b4 	.word	0x200000b4

080005ac <updateClockBuffer>:

void updateClockBuffer() {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
    led_buffer[0] = value / 1000;
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <updateClockBuffer+0x88>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <updateClockBuffer+0x8c>)
 80005b6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ba:	1192      	asrs	r2, r2, #6
 80005bc:	17db      	asrs	r3, r3, #31
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	4a1e      	ldr	r2, [pc, #120]	; (800063c <updateClockBuffer+0x90>)
 80005c2:	6013      	str	r3, [r2, #0]
    led_buffer[1] = (value / 100) % 10;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <updateClockBuffer+0x88>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <updateClockBuffer+0x94>)
 80005ca:	fb82 1203 	smull	r1, r2, r2, r3
 80005ce:	1152      	asrs	r2, r2, #5
 80005d0:	17db      	asrs	r3, r3, #31
 80005d2:	1ad1      	subs	r1, r2, r3
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <updateClockBuffer+0x98>)
 80005d6:	fb83 2301 	smull	r2, r3, r3, r1
 80005da:	109a      	asrs	r2, r3, #2
 80005dc:	17cb      	asrs	r3, r1, #31
 80005de:	1ad2      	subs	r2, r2, r3
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	1aca      	subs	r2, r1, r3
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <updateClockBuffer+0x90>)
 80005ec:	605a      	str	r2, [r3, #4]
    led_buffer[2] = value1 / 1000;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <updateClockBuffer+0x9c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a11      	ldr	r2, [pc, #68]	; (8000638 <updateClockBuffer+0x8c>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	1192      	asrs	r2, r2, #6
 80005fa:	17db      	asrs	r3, r3, #31
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <updateClockBuffer+0x90>)
 8000600:	6093      	str	r3, [r2, #8]
    led_buffer[3] = (value1 / 100) % 10;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <updateClockBuffer+0x9c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <updateClockBuffer+0x94>)
 8000608:	fb82 1203 	smull	r1, r2, r2, r3
 800060c:	1152      	asrs	r2, r2, #5
 800060e:	17db      	asrs	r3, r3, #31
 8000610:	1ad1      	subs	r1, r2, r3
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <updateClockBuffer+0x98>)
 8000614:	fb83 2301 	smull	r2, r3, r3, r1
 8000618:	109a      	asrs	r2, r3, #2
 800061a:	17cb      	asrs	r3, r1, #31
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <updateClockBuffer+0x90>)
 800062a:	60da      	str	r2, [r3, #12]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	20000084 	.word	0x20000084
 8000638:	10624dd3 	.word	0x10624dd3
 800063c:	200000b4 	.word	0x200000b4
 8000640:	51eb851f 	.word	0x51eb851f
 8000644:	66666667 	.word	0x66666667
 8000648:	20000088 	.word	0x20000088

0800064c <clearAllClock>:

void clearAllClock() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <clearAllClock+0x20>)
 8000658:	f000 ffeb 	bl	8001632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <clearAllClock+0x24>)
 8000664:	f000 ffe5 	bl	8001632 <HAL_GPIO_WritePin>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010800 	.word	0x40010800
 8000670:	40010c00 	.word	0x40010c00

08000674 <fsm_traffic_light_run>:

int TIME_RED_tmp = 0;
int TIME_AMBER_tmp = 0;
int TIME_GREEN_tmp = 0;

void fsm_traffic_light_run() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	switch (status) {
 8000678:	4baf      	ldr	r3, [pc, #700]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	2b07      	cmp	r3, #7
 8000680:	f200 823e 	bhi.w	8000b00 <fsm_traffic_light_run+0x48c>
 8000684:	a201      	add	r2, pc, #4	; (adr r2, 800068c <fsm_traffic_light_run+0x18>)
 8000686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068a:	bf00      	nop
 800068c:	080006ad 	.word	0x080006ad
 8000690:	080006c1 	.word	0x080006c1
 8000694:	08000753 	.word	0x08000753
 8000698:	080007d3 	.word	0x080007d3
 800069c:	08000865 	.word	0x08000865
 80006a0:	080008d9 	.word	0x080008d9
 80006a4:	0800099d 	.word	0x0800099d
 80006a8:	08000a39 	.word	0x08000a39
	case INIT:
		status = RED_GREEN;
 80006ac:	4ba2      	ldr	r3, [pc, #648]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	601a      	str	r2, [r3, #0]
		setTimer(0, TIME_GREEN);
 80006b2:	4ba2      	ldr	r3, [pc, #648]	; (800093c <fsm_traffic_light_run+0x2c8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fb9b 	bl	8000df4 <setTimer>
		break;
 80006be:	e22e      	b.n	8000b1e <fsm_traffic_light_run+0x4aa>
	case RED_GREEN:
		value = timer_counter[0] + TIME_YELLOW / 10;
 80006c0:	4b9f      	ldr	r3, [pc, #636]	; (8000940 <fsm_traffic_light_run+0x2cc>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b9f      	ldr	r3, [pc, #636]	; (8000944 <fsm_traffic_light_run+0x2d0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	499f      	ldr	r1, [pc, #636]	; (8000948 <fsm_traffic_light_run+0x2d4>)
 80006ca:	fb81 0103 	smull	r0, r1, r1, r3
 80006ce:	1089      	asrs	r1, r1, #2
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1acb      	subs	r3, r1, r3
 80006d4:	4413      	add	r3, r2
 80006d6:	4a9d      	ldr	r2, [pc, #628]	; (800094c <fsm_traffic_light_run+0x2d8>)
 80006d8:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 80006da:	4b99      	ldr	r3, [pc, #612]	; (8000940 <fsm_traffic_light_run+0x2cc>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a9c      	ldr	r2, [pc, #624]	; (8000950 <fsm_traffic_light_run+0x2dc>)
 80006e0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_OP_Pin | LED_YELLOW_OP_Pin, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	21cc      	movs	r1, #204	; 0xcc
 80006e6:	489b      	ldr	r0, [pc, #620]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 80006e8:	f000 ffa3 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_OP_Pin, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2130      	movs	r1, #48	; 0x30
 80006f0:	4898      	ldr	r0, [pc, #608]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 80006f2:	f000 ff9e 	bl	8001632 <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 fb9c 	bl	8000e34 <isTimerExpired>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d108      	bne.n	8000714 <fsm_traffic_light_run+0xa0>
			status = RED_YELLOW;
 8000702:	4b8d      	ldr	r3, [pc, #564]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 8000704:	2203      	movs	r2, #3
 8000706:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_YELLOW);
 8000708:	4b8e      	ldr	r3, [pc, #568]	; (8000944 <fsm_traffic_light_run+0x2d0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fb70 	bl	8000df4 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fd19 	bl	800014c <isButtonPressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	f040 81f1 	bne.w	8000b04 <fsm_traffic_light_run+0x490>
			status = MOD_RED;
 8000722:	4b85      	ldr	r3, [pc, #532]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 8000724:	2206      	movs	r2, #6
 8000726:	601a      	str	r2, [r3, #0]
			clearAllClock();
 8000728:	f7ff ff90 	bl	800064c <clearAllClock>
			value = TIME_RED / 10;
 800072c:	4b8a      	ldr	r3, [pc, #552]	; (8000958 <fsm_traffic_light_run+0x2e4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a85      	ldr	r2, [pc, #532]	; (8000948 <fsm_traffic_light_run+0x2d4>)
 8000732:	fb82 1203 	smull	r1, r2, r2, r3
 8000736:	1092      	asrs	r2, r2, #2
 8000738:	17db      	asrs	r3, r3, #31
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	4a83      	ldr	r2, [pc, #524]	; (800094c <fsm_traffic_light_run+0x2d8>)
 800073e:	6013      	str	r3, [r2, #0]
			value1 = 200;
 8000740:	4b83      	ldr	r3, [pc, #524]	; (8000950 <fsm_traffic_light_run+0x2dc>)
 8000742:	22c8      	movs	r2, #200	; 0xc8
 8000744:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 8000746:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800074a:	2000      	movs	r0, #0
 800074c:	f000 fb52 	bl	8000df4 <setTimer>
		}
		break;
 8000750:	e1d8      	b.n	8000b04 <fsm_traffic_light_run+0x490>
	case RED_YELLOW:
		value = timer_counter[0];
 8000752:	4b7b      	ldr	r3, [pc, #492]	; (8000940 <fsm_traffic_light_run+0x2cc>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a7d      	ldr	r2, [pc, #500]	; (800094c <fsm_traffic_light_run+0x2d8>)
 8000758:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 800075a:	4b79      	ldr	r3, [pc, #484]	; (8000940 <fsm_traffic_light_run+0x2cc>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a7c      	ldr	r2, [pc, #496]	; (8000950 <fsm_traffic_light_run+0x2dc>)
 8000760:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_OP_Pin | LED_GREEN_OP_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	21d4      	movs	r1, #212	; 0xd4
 8000766:	487b      	ldr	r0, [pc, #492]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 8000768:	f000 ff63 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_YELLOW_OP_Pin, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2128      	movs	r1, #40	; 0x28
 8000770:	4878      	ldr	r0, [pc, #480]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 8000772:	f000 ff5e 	bl	8001632 <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fb5c 	bl	8000e34 <isTimerExpired>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d108      	bne.n	8000794 <fsm_traffic_light_run+0x120>
			status = GREEN_RED;
 8000782:	4b6d      	ldr	r3, [pc, #436]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 8000784:	2204      	movs	r2, #4
 8000786:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 8000788:	4b6c      	ldr	r3, [pc, #432]	; (800093c <fsm_traffic_light_run+0x2c8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fb30 	bl	8000df4 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff fcd9 	bl	800014c <isButtonPressed>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	f040 81b3 	bne.w	8000b08 <fsm_traffic_light_run+0x494>
			status = MOD_RED;
 80007a2:	4b65      	ldr	r3, [pc, #404]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 80007a4:	2206      	movs	r2, #6
 80007a6:	601a      	str	r2, [r3, #0]
			clearAllClock();
 80007a8:	f7ff ff50 	bl	800064c <clearAllClock>
			value = TIME_RED / 10;
 80007ac:	4b6a      	ldr	r3, [pc, #424]	; (8000958 <fsm_traffic_light_run+0x2e4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a65      	ldr	r2, [pc, #404]	; (8000948 <fsm_traffic_light_run+0x2d4>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1092      	asrs	r2, r2, #2
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	4a63      	ldr	r2, [pc, #396]	; (800094c <fsm_traffic_light_run+0x2d8>)
 80007be:	6013      	str	r3, [r2, #0]
			value1 = 200;
 80007c0:	4b63      	ldr	r3, [pc, #396]	; (8000950 <fsm_traffic_light_run+0x2dc>)
 80007c2:	22c8      	movs	r2, #200	; 0xc8
 80007c4:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 80007c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fb12 	bl	8000df4 <setTimer>
		}
		break;
 80007d0:	e19a      	b.n	8000b08 <fsm_traffic_light_run+0x494>
	case GREEN_RED:
		value = timer_counter[0];
 80007d2:	4b5b      	ldr	r3, [pc, #364]	; (8000940 <fsm_traffic_light_run+0x2cc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a5d      	ldr	r2, [pc, #372]	; (800094c <fsm_traffic_light_run+0x2d8>)
 80007d8:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0] + TIME_YELLOW / 10;
 80007da:	4b59      	ldr	r3, [pc, #356]	; (8000940 <fsm_traffic_light_run+0x2cc>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b59      	ldr	r3, [pc, #356]	; (8000944 <fsm_traffic_light_run+0x2d0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4959      	ldr	r1, [pc, #356]	; (8000948 <fsm_traffic_light_run+0x2d4>)
 80007e4:	fb81 0103 	smull	r0, r1, r1, r3
 80007e8:	1089      	asrs	r1, r1, #2
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1acb      	subs	r3, r1, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	4a57      	ldr	r2, [pc, #348]	; (8000950 <fsm_traffic_light_run+0x2dc>)
 80007f2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_YELLOW_Pin | LED_YELLOW_OP_Pin | LED_GREEN_OP_Pin, 1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2178      	movs	r1, #120	; 0x78
 80007f8:	4856      	ldr	r0, [pc, #344]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 80007fa:	f000 ff1a 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin | LED_RED_OP_Pin, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2184      	movs	r1, #132	; 0x84
 8000802:	4854      	ldr	r0, [pc, #336]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 8000804:	f000 ff15 	bl	8001632 <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fb13 	bl	8000e34 <isTimerExpired>
 800080e:	4603      	mov	r3, r0
 8000810:	2b01      	cmp	r3, #1
 8000812:	d108      	bne.n	8000826 <fsm_traffic_light_run+0x1b2>
			status = YELLOW_RED;
 8000814:	4b48      	ldr	r3, [pc, #288]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 8000816:	2205      	movs	r2, #5
 8000818:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_YELLOW);
 800081a:	4b4a      	ldr	r3, [pc, #296]	; (8000944 <fsm_traffic_light_run+0x2d0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	2000      	movs	r0, #0
 8000822:	f000 fae7 	bl	8000df4 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fc90 	bl	800014c <isButtonPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	f040 816c 	bne.w	8000b0c <fsm_traffic_light_run+0x498>
			value = TIME_RED / 10;
 8000834:	4b48      	ldr	r3, [pc, #288]	; (8000958 <fsm_traffic_light_run+0x2e4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a43      	ldr	r2, [pc, #268]	; (8000948 <fsm_traffic_light_run+0x2d4>)
 800083a:	fb82 1203 	smull	r1, r2, r2, r3
 800083e:	1092      	asrs	r2, r2, #2
 8000840:	17db      	asrs	r3, r3, #31
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	4a41      	ldr	r2, [pc, #260]	; (800094c <fsm_traffic_light_run+0x2d8>)
 8000846:	6013      	str	r3, [r2, #0]
			value1 = 200;
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <fsm_traffic_light_run+0x2dc>)
 800084a:	22c8      	movs	r2, #200	; 0xc8
 800084c:	601a      	str	r2, [r3, #0]
			status = MOD_RED;
 800084e:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 8000850:	2206      	movs	r2, #6
 8000852:	601a      	str	r2, [r3, #0]
			clearAllClock();
 8000854:	f7ff fefa 	bl	800064c <clearAllClock>
			setTimer(0, 500);
 8000858:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800085c:	2000      	movs	r0, #0
 800085e:	f000 fac9 	bl	8000df4 <setTimer>
		}
		break;
 8000862:	e153      	b.n	8000b0c <fsm_traffic_light_run+0x498>
	case YELLOW_RED:
		value = timer_counter[0];
 8000864:	4b36      	ldr	r3, [pc, #216]	; (8000940 <fsm_traffic_light_run+0x2cc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a38      	ldr	r2, [pc, #224]	; (800094c <fsm_traffic_light_run+0x2d8>)
 800086a:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <fsm_traffic_light_run+0x2cc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a37      	ldr	r2, [pc, #220]	; (8000950 <fsm_traffic_light_run+0x2dc>)
 8000872:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_Pin | LED_YELLOW_OP_Pin | LED_GREEN_OP_Pin, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	21b8      	movs	r1, #184	; 0xb8
 8000878:	4836      	ldr	r0, [pc, #216]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 800087a:	f000 feda 	bl	8001632 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_RED_OP_Pin, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2144      	movs	r1, #68	; 0x44
 8000882:	4834      	ldr	r0, [pc, #208]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 8000884:	f000 fed5 	bl	8001632 <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fad3 	bl	8000e34 <isTimerExpired>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d108      	bne.n	80008a6 <fsm_traffic_light_run+0x232>
			status = RED_GREEN;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 8000896:	2202      	movs	r2, #2
 8000898:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <fsm_traffic_light_run+0x2c8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 faa7 	bl	8000df4 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fc50 	bl	800014c <isButtonPressed>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	f040 812e 	bne.w	8000b10 <fsm_traffic_light_run+0x49c>
			value = 5000 / 10;
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <fsm_traffic_light_run+0x2d8>)
 80008b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008ba:	601a      	str	r2, [r3, #0]
			value1 = 200;
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <fsm_traffic_light_run+0x2dc>)
 80008be:	22c8      	movs	r2, #200	; 0xc8
 80008c0:	601a      	str	r2, [r3, #0]
			status = MOD_RED;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <fsm_traffic_light_run+0x2c4>)
 80008c4:	2206      	movs	r2, #6
 80008c6:	601a      	str	r2, [r3, #0]
			clearAllClock();
 80008c8:	f7ff fec0 	bl	800064c <clearAllClock>
			setTimer(0, 500);
 80008cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 fa8f 	bl	8000df4 <setTimer>
		}
		break;
 80008d6:	e11b      	b.n	8000b10 <fsm_traffic_light_run+0x49c>
	case MOD_RED:
		if (isTimerExpired(0) == 1) {
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 faab 	bl	8000e34 <isTimerExpired>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d108      	bne.n	80008f6 <fsm_traffic_light_run+0x282>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin | LED_RED_OP_Pin);
 80008e4:	2124      	movs	r1, #36	; 0x24
 80008e6:	481b      	ldr	r0, [pc, #108]	; (8000954 <fsm_traffic_light_run+0x2e0>)
 80008e8:	f000 febb 	bl	8001662 <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 80008ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 fa7f 	bl	8000df4 <setTimer>
		}
		if (isButtonPressed(1) == 1) {
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fc28 	bl	800014c <isButtonPressed>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d10e      	bne.n	8000920 <fsm_traffic_light_run+0x2ac>
			if (value > 9900) {
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <fsm_traffic_light_run+0x2d8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f242 62ac 	movw	r2, #9900	; 0x26ac
 800090a:	4293      	cmp	r3, r2
 800090c:	dd03      	ble.n	8000916 <fsm_traffic_light_run+0x2a2>
				value = 0;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <fsm_traffic_light_run+0x2d8>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e004      	b.n	8000920 <fsm_traffic_light_run+0x2ac>
			}
			else {
				value += 100;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <fsm_traffic_light_run+0x2d8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3364      	adds	r3, #100	; 0x64
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <fsm_traffic_light_run+0x2d8>)
 800091e:	6013      	str	r3, [r2, #0]
			}
		}
		if (isButtonPressed(2) == 1) {
 8000920:	2002      	movs	r0, #2
 8000922:	f7ff fc13 	bl	800014c <isButtonPressed>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	d119      	bne.n	8000960 <fsm_traffic_light_run+0x2ec>
			TIME_RED_tmp = value;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <fsm_traffic_light_run+0x2d8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <fsm_traffic_light_run+0x2e8>)
 8000932:	6013      	str	r3, [r2, #0]
			value = TIME_YELLOW / 10;
			value1 = 300;
			status = MOD_AMBER;
			setTimer(0, 500);
		}
		break;
 8000934:	e0ee      	b.n	8000b14 <fsm_traffic_light_run+0x4a0>
 8000936:	bf00      	nop
 8000938:	20000080 	.word	0x20000080
 800093c:	20000044 	.word	0x20000044
 8000940:	2000010c 	.word	0x2000010c
 8000944:	20000040 	.word	0x20000040
 8000948:	66666667 	.word	0x66666667
 800094c:	20000084 	.word	0x20000084
 8000950:	20000088 	.word	0x20000088
 8000954:	40010800 	.word	0x40010800
 8000958:	2000003c 	.word	0x2000003c
 800095c:	20000074 	.word	0x20000074
		else if (isButtonPressed(0) == 1) {
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fbf3 	bl	800014c <isButtonPressed>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	f040 80d3 	bne.w	8000b14 <fsm_traffic_light_run+0x4a0>
			value = TIME_YELLOW / 10;
 800096e:	4b6d      	ldr	r3, [pc, #436]	; (8000b24 <fsm_traffic_light_run+0x4b0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a6d      	ldr	r2, [pc, #436]	; (8000b28 <fsm_traffic_light_run+0x4b4>)
 8000974:	fb82 1203 	smull	r1, r2, r2, r3
 8000978:	1092      	asrs	r2, r2, #2
 800097a:	17db      	asrs	r3, r3, #31
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	4a6b      	ldr	r2, [pc, #428]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 8000980:	6013      	str	r3, [r2, #0]
			value1 = 300;
 8000982:	4b6b      	ldr	r3, [pc, #428]	; (8000b30 <fsm_traffic_light_run+0x4bc>)
 8000984:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000988:	601a      	str	r2, [r3, #0]
			status = MOD_AMBER;
 800098a:	4b6a      	ldr	r3, [pc, #424]	; (8000b34 <fsm_traffic_light_run+0x4c0>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 8000990:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000994:	2000      	movs	r0, #0
 8000996:	f000 fa2d 	bl	8000df4 <setTimer>
		break;
 800099a:	e0bb      	b.n	8000b14 <fsm_traffic_light_run+0x4a0>
	case MOD_AMBER:
		clearAllClock();
 800099c:	f7ff fe56 	bl	800064c <clearAllClock>

		if (isTimerExpired(0) == 1) {
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fa47 	bl	8000e34 <isTimerExpired>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d108      	bne.n	80009be <fsm_traffic_light_run+0x34a>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_Pin | LED_YELLOW_OP_Pin);
 80009ac:	2148      	movs	r1, #72	; 0x48
 80009ae:	4862      	ldr	r0, [pc, #392]	; (8000b38 <fsm_traffic_light_run+0x4c4>)
 80009b0:	f000 fe57 	bl	8001662 <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 80009b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fa1b 	bl	8000df4 <setTimer>
		}

		if (isButtonPressed(1) == 1) {
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fbc4 	bl	800014c <isButtonPressed>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d10d      	bne.n	80009e6 <fsm_traffic_light_run+0x372>
			value = (value > 9900) ? 0 : value + 100;
 80009ca:	4b58      	ldr	r3, [pc, #352]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f242 62ac 	movw	r2, #9900	; 0x26ac
 80009d2:	4293      	cmp	r3, r2
 80009d4:	dc03      	bgt.n	80009de <fsm_traffic_light_run+0x36a>
 80009d6:	4b55      	ldr	r3, [pc, #340]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3364      	adds	r3, #100	; 0x64
 80009dc:	e000      	b.n	80009e0 <fsm_traffic_light_run+0x36c>
 80009de:	2300      	movs	r3, #0
 80009e0:	4a52      	ldr	r2, [pc, #328]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 80009e2:	6013      	str	r3, [r2, #0]
			value = TIME_GREEN / 10;
			value1 = 400;
			status = MOD_GREEN;
			setTimer(0, 500);
		}
		break;
 80009e4:	e098      	b.n	8000b18 <fsm_traffic_light_run+0x4a4>
		else if (isButtonPressed(2) == 1) {
 80009e6:	2002      	movs	r0, #2
 80009e8:	f7ff fbb0 	bl	800014c <isButtonPressed>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d104      	bne.n	80009fc <fsm_traffic_light_run+0x388>
			TIME_AMBER_tmp = value;
 80009f2:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a51      	ldr	r2, [pc, #324]	; (8000b3c <fsm_traffic_light_run+0x4c8>)
 80009f8:	6013      	str	r3, [r2, #0]
		break;
 80009fa:	e08d      	b.n	8000b18 <fsm_traffic_light_run+0x4a4>
		else if (isButtonPressed(0) == 1) {
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fba5 	bl	800014c <isButtonPressed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	f040 8087 	bne.w	8000b18 <fsm_traffic_light_run+0x4a4>
			value = TIME_GREEN / 10;
 8000a0a:	4b4d      	ldr	r3, [pc, #308]	; (8000b40 <fsm_traffic_light_run+0x4cc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a46      	ldr	r2, [pc, #280]	; (8000b28 <fsm_traffic_light_run+0x4b4>)
 8000a10:	fb82 1203 	smull	r1, r2, r2, r3
 8000a14:	1092      	asrs	r2, r2, #2
 8000a16:	17db      	asrs	r3, r3, #31
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	4a44      	ldr	r2, [pc, #272]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 8000a1c:	6013      	str	r3, [r2, #0]
			value1 = 400;
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <fsm_traffic_light_run+0x4bc>)
 8000a20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a24:	601a      	str	r2, [r3, #0]
			status = MOD_GREEN;
 8000a26:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <fsm_traffic_light_run+0x4c0>)
 8000a28:	2208      	movs	r2, #8
 8000a2a:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 8000a2c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 f9df 	bl	8000df4 <setTimer>
		break;
 8000a36:	e06f      	b.n	8000b18 <fsm_traffic_light_run+0x4a4>
	case MOD_GREEN:
		clearAllClock();
 8000a38:	f7ff fe08 	bl	800064c <clearAllClock>

		if (isTimerExpired(0) == 1) {
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 f9f9 	bl	8000e34 <isTimerExpired>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d108      	bne.n	8000a5a <fsm_traffic_light_run+0x3e6>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin | LED_GREEN_OP_Pin);
 8000a48:	2190      	movs	r1, #144	; 0x90
 8000a4a:	483b      	ldr	r0, [pc, #236]	; (8000b38 <fsm_traffic_light_run+0x4c4>)
 8000a4c:	f000 fe09 	bl	8001662 <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 8000a50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 f9cd 	bl	8000df4 <setTimer>
		}

		if (isButtonPressed(1) == 1) {
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fb76 	bl	800014c <isButtonPressed>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10d      	bne.n	8000a82 <fsm_traffic_light_run+0x40e>
			value = (value > 9900) ? 0 : value + 100;
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	dc03      	bgt.n	8000a7a <fsm_traffic_light_run+0x406>
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3364      	adds	r3, #100	; 0x64
 8000a78:	e000      	b.n	8000a7c <fsm_traffic_light_run+0x408>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	4a2b      	ldr	r2, [pc, #172]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 8000a7e:	6013      	str	r3, [r2, #0]
		}
		else if (isButtonPressed(0) == 1) {
			status = RED_GREEN;
			setTimer(0, TIME_GREEN);
		}
		break;
 8000a80:	e04c      	b.n	8000b1c <fsm_traffic_light_run+0x4a8>
		else if (isButtonPressed(2) == 1) {
 8000a82:	2002      	movs	r0, #2
 8000a84:	f7ff fb62 	bl	800014c <isButtonPressed>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d128      	bne.n	8000ae0 <fsm_traffic_light_run+0x46c>
			TIME_GREEN_tmp = value;
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <fsm_traffic_light_run+0x4b8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <fsm_traffic_light_run+0x4d0>)
 8000a94:	6013      	str	r3, [r2, #0]
			if (TIME_GREEN_tmp + TIME_AMBER_tmp == TIME_RED_tmp) {
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <fsm_traffic_light_run+0x4d0>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <fsm_traffic_light_run+0x4c8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	441a      	add	r2, r3
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <fsm_traffic_light_run+0x4d4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d139      	bne.n	8000b1c <fsm_traffic_light_run+0x4a8>
				TIME_GREEN = TIME_GREEN_tmp * 10;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <fsm_traffic_light_run+0x4d0>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4613      	mov	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <fsm_traffic_light_run+0x4cc>)
 8000ab8:	601a      	str	r2, [r3, #0]
				TIME_YELLOW = TIME_AMBER_tmp * 10;
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <fsm_traffic_light_run+0x4c8>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <fsm_traffic_light_run+0x4b0>)
 8000aca:	601a      	str	r2, [r3, #0]
				TIME_RED = TIME_RED_tmp * 10;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <fsm_traffic_light_run+0x4d4>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <fsm_traffic_light_run+0x4d8>)
 8000adc:	601a      	str	r2, [r3, #0]
		break;
 8000ade:	e01d      	b.n	8000b1c <fsm_traffic_light_run+0x4a8>
		else if (isButtonPressed(0) == 1) {
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fb33 	bl	800014c <isButtonPressed>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d117      	bne.n	8000b1c <fsm_traffic_light_run+0x4a8>
			status = RED_GREEN;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <fsm_traffic_light_run+0x4c0>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <fsm_traffic_light_run+0x4cc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 f97b 	bl	8000df4 <setTimer>
		break;
 8000afe:	e00d      	b.n	8000b1c <fsm_traffic_light_run+0x4a8>
	default:
		break;
 8000b00:	bf00      	nop
 8000b02:	e00c      	b.n	8000b1e <fsm_traffic_light_run+0x4aa>
		break;
 8000b04:	bf00      	nop
 8000b06:	e00a      	b.n	8000b1e <fsm_traffic_light_run+0x4aa>
		break;
 8000b08:	bf00      	nop
 8000b0a:	e008      	b.n	8000b1e <fsm_traffic_light_run+0x4aa>
		break;
 8000b0c:	bf00      	nop
 8000b0e:	e006      	b.n	8000b1e <fsm_traffic_light_run+0x4aa>
		break;
 8000b10:	bf00      	nop
 8000b12:	e004      	b.n	8000b1e <fsm_traffic_light_run+0x4aa>
		break;
 8000b14:	bf00      	nop
 8000b16:	e002      	b.n	8000b1e <fsm_traffic_light_run+0x4aa>
		break;
 8000b18:	bf00      	nop
 8000b1a:	e000      	b.n	8000b1e <fsm_traffic_light_run+0x4aa>
		break;
 8000b1c:	bf00      	nop
	}
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000040 	.word	0x20000040
 8000b28:	66666667 	.word	0x66666667
 8000b2c:	20000084 	.word	0x20000084
 8000b30:	20000088 	.word	0x20000088
 8000b34:	20000080 	.word	0x20000080
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	20000078 	.word	0x20000078
 8000b40:	20000044 	.word	0x20000044
 8000b44:	2000007c 	.word	0x2000007c
 8000b48:	20000074 	.word	0x20000074
 8000b4c:	2000003c 	.word	0x2000003c

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 fa6c 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f834 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 f8ba 	bl	8000cd4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b60:	f000 f86c 	bl	8000c3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b64:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <main+0x68>)
 8000b66:	f001 f9c1 	bl	8001eec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1, 10);
 8000b6a:	210a      	movs	r1, #10
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f000 f941 	bl	8000df4 <setTimer>
  status = INIT;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <main+0x6c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  updateClockBuffer();
 8000b78:	f7ff fd18 	bl	80005ac <updateClockBuffer>
	  fsm_traffic_light_run();
 8000b7c:	f7ff fd7a 	bl	8000674 <fsm_traffic_light_run>
	  if (isTimerExpired(1) == 1) {
 8000b80:	2001      	movs	r0, #1
 8000b82:	f000 f957 	bl	8000e34 <isTimerExpired>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d1f5      	bne.n	8000b78 <main+0x28>
		  setTimer(1, 100);
 8000b8c:	2164      	movs	r1, #100	; 0x64
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 f930 	bl	8000df4 <setTimer>
		  update7SEG(index_led);
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <main+0x70>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fcc5 	bl	8000528 <update7SEG>
		  ++index_led;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <main+0x70>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <main+0x70>)
 8000ba6:	6013      	str	r3, [r2, #0]
		  if (index_led > 1) {
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <main+0x70>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	dde3      	ble.n	8000b78 <main+0x28>
			  index_led = 0;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <main+0x70>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
	  updateClockBuffer();
 8000bb6:	e7df      	b.n	8000b78 <main+0x28>
 8000bb8:	200000c4 	.word	0x200000c4
 8000bbc:	20000080 	.word	0x20000080
 8000bc0:	20000070 	.word	0x20000070

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b090      	sub	sp, #64	; 0x40
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2228      	movs	r2, #40	; 0x28
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fd3a 	bl	800264c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bee:	2310      	movs	r3, #16
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fd4a 	bl	8001694 <HAL_RCC_OscConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c06:	f000 f8ef 	bl	8000de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 ffb6 	bl	8001b94 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 f8db 	bl	8000de8 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3740      	adds	r7, #64	; 0x40
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c62:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c70:	2209      	movs	r2, #9
 8000c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c82:	f001 f8e3 	bl	8001e4c <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c8c:	f000 f8ac 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c9e:	f001 fa61 	bl	8002164 <HAL_TIM_ConfigClockSource>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ca8:	f000 f89e 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000cba:	f001 fc39 	bl	8002530 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f000 f890 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000c4 	.word	0x200000c4

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <MX_GPIO_Init+0xec>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_OP_Pin|LED_YELLOW_OP_Pin|LED_GREEN_OP_Pin|LED_RED_Pin
 8000d30:	2200      	movs	r2, #0
 8000d32:	f240 71fc 	movw	r1, #2044	; 0x7fc
 8000d36:	4823      	ldr	r0, [pc, #140]	; (8000dc4 <MX_GPIO_Init+0xf0>)
 8000d38:	f000 fc7b 	bl	8001632 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d2_Pin
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000d42:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <MX_GPIO_Init+0xf4>)
 8000d44:	f000 fc75 	bl	8001632 <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : MODULE_Pin */
  GPIO_InitStruct.Pin = MODULE_Pin;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODULE_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d5e:	f000 fad7 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_OP_Pin LED_YELLOW_OP_Pin LED_GREEN_OP_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin
                           D2_Pin */
  GPIO_InitStruct.Pin = LED_RED_OP_Pin|LED_YELLOW_OP_Pin|LED_GREEN_OP_Pin|LED_RED_Pin
 8000d62:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8000d66:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <MX_GPIO_Init+0xf0>)
 8000d7c:	f000 fac8 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d_Pin
                           e_Pin f_Pin g_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d2_Pin
 8000d80:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000d84:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <MX_GPIO_Init+0xf4>)
 8000d9a:	f000 fab9 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIME_Pin VALUE_Pin */
  GPIO_InitStruct.Pin = TIME_Pin|VALUE_Pin;
 8000d9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_GPIO_Init+0xf4>)
 8000db4:	f000 faac 	bl	8001310 <HAL_GPIO_Init>

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	40011000 	.word	0x40011000

08000dd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	timerRun();
 8000dd8:	f000 f846 	bl	8000e68 <timerRun>
	getKeyInput();
 8000ddc:	f7ff f9d0 	bl	8000180 <getKeyInput>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <setTimer>:
#include "software_timer.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value / TIMER_TICK;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <setTimer+0x34>)
 8000e02:	fb82 1203 	smull	r1, r2, r2, r3
 8000e06:	1092      	asrs	r2, r2, #2
 8000e08:	17db      	asrs	r3, r3, #31
 8000e0a:	1ad2      	subs	r2, r2, r3
 8000e0c:	4907      	ldr	r1, [pc, #28]	; (8000e2c <setTimer+0x38>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <setTimer+0x3c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	66666667 	.word	0x66666667
 8000e2c:	2000010c 	.word	0x2000010c
 8000e30:	20000138 	.word	0x20000138

08000e34 <isTimerExpired>:

int isTimerExpired(int index) {
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8000e3c:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <isTimerExpired+0x30>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d106      	bne.n	8000e56 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <isTimerExpired+0x30>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <isTimerExpired+0x24>
	}
	return 0;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000138 	.word	0x20000138

08000e68 <timerRun>:

void timerRun() {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	e01c      	b.n	8000eae <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <timerRun+0x58>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dd13      	ble.n	8000ea8 <timerRun+0x40>
			--timer_counter[i];
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <timerRun+0x58>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	1e5a      	subs	r2, r3, #1
 8000e8a:	490d      	ldr	r1, [pc, #52]	; (8000ec0 <timerRun+0x58>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <timerRun+0x58>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	dc04      	bgt.n	8000ea8 <timerRun+0x40>
				timer_flag[i] = 1;
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <timerRun+0x5c>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0a      	cmp	r3, #10
 8000eb2:	dddf      	ble.n	8000e74 <timerRun+0xc>
			}
		}
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	2000010c 	.word	0x2000010c
 8000ec4:	20000138 	.word	0x20000138

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x5c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x60>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_MspInit+0x60>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000

08000f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f3c:	d113      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	201c      	movs	r0, #28
 8000f5c:	f000 f9a1 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f60:	201c      	movs	r0, #28
 8000f62:	f000 f9ba 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f87f 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM2_IRQHandler+0x10>)
 8000fca:	f000 ffdb 	bl	8001f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000c4 	.word	0x200000c4

08000fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe4:	f7ff fff8 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fea:	490c      	ldr	r1, [pc, #48]	; (800101c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001000:	4c09      	ldr	r4, [pc, #36]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f001 faf9 	bl	8002604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001012:	f7ff fd9d 	bl	8000b50 <main>
  bx lr
 8001016:	4770      	bx	lr
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001020:	080026a0 	.word	0x080026a0
  ldr r2, =_sbss
 8001024:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001028:	20000168 	.word	0x20000168

0800102c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_2_IRQHandler>
	...

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x28>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x28>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f923 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff ff3c 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f93b 	bl	80012f6 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f903 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000048 	.word	0x20000048
 80010b4:	20000050 	.word	0x20000050
 80010b8:	2000004c 	.word	0x2000004c

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x1c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a03      	ldr	r2, [pc, #12]	; (80010dc <HAL_IncTick+0x20>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	20000050 	.word	0x20000050
 80010dc:	20000164 	.word	0x20000164

080010e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <HAL_GetTick+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	20000164 	.word	0x20000164

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4906      	ldr	r1, [pc, #24]	; (800118c <__NVIC_EnableIRQ+0x34>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff90 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff2d 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff42 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff90 	bl	80011e4 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5f 	bl	8001190 <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff35 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001310:	b480      	push	{r7}
 8001312:	b08b      	sub	sp, #44	; 0x2c
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	e148      	b.n	80015b6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001324:	2201      	movs	r2, #1
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 8137 	bne.w	80015b0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4aa3      	ldr	r2, [pc, #652]	; (80015d4 <HAL_GPIO_Init+0x2c4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d05e      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 800134c:	4aa1      	ldr	r2, [pc, #644]	; (80015d4 <HAL_GPIO_Init+0x2c4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d875      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 8001352:	4aa1      	ldr	r2, [pc, #644]	; (80015d8 <HAL_GPIO_Init+0x2c8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d058      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 8001358:	4a9f      	ldr	r2, [pc, #636]	; (80015d8 <HAL_GPIO_Init+0x2c8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d86f      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 800135e:	4a9f      	ldr	r2, [pc, #636]	; (80015dc <HAL_GPIO_Init+0x2cc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d052      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 8001364:	4a9d      	ldr	r2, [pc, #628]	; (80015dc <HAL_GPIO_Init+0x2cc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d869      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 800136a:	4a9d      	ldr	r2, [pc, #628]	; (80015e0 <HAL_GPIO_Init+0x2d0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d04c      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 8001370:	4a9b      	ldr	r2, [pc, #620]	; (80015e0 <HAL_GPIO_Init+0x2d0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d863      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 8001376:	4a9b      	ldr	r2, [pc, #620]	; (80015e4 <HAL_GPIO_Init+0x2d4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d046      	beq.n	800140a <HAL_GPIO_Init+0xfa>
 800137c:	4a99      	ldr	r2, [pc, #612]	; (80015e4 <HAL_GPIO_Init+0x2d4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d85d      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 8001382:	2b12      	cmp	r3, #18
 8001384:	d82a      	bhi.n	80013dc <HAL_GPIO_Init+0xcc>
 8001386:	2b12      	cmp	r3, #18
 8001388:	d859      	bhi.n	800143e <HAL_GPIO_Init+0x12e>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <HAL_GPIO_Init+0x80>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	0800140b 	.word	0x0800140b
 8001394:	080013e5 	.word	0x080013e5
 8001398:	080013f7 	.word	0x080013f7
 800139c:	08001439 	.word	0x08001439
 80013a0:	0800143f 	.word	0x0800143f
 80013a4:	0800143f 	.word	0x0800143f
 80013a8:	0800143f 	.word	0x0800143f
 80013ac:	0800143f 	.word	0x0800143f
 80013b0:	0800143f 	.word	0x0800143f
 80013b4:	0800143f 	.word	0x0800143f
 80013b8:	0800143f 	.word	0x0800143f
 80013bc:	0800143f 	.word	0x0800143f
 80013c0:	0800143f 	.word	0x0800143f
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	0800143f 	.word	0x0800143f
 80013cc:	0800143f 	.word	0x0800143f
 80013d0:	0800143f 	.word	0x0800143f
 80013d4:	080013ed 	.word	0x080013ed
 80013d8:	08001401 	.word	0x08001401
 80013dc:	4a82      	ldr	r2, [pc, #520]	; (80015e8 <HAL_GPIO_Init+0x2d8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013e2:	e02c      	b.n	800143e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	623b      	str	r3, [r7, #32]
          break;
 80013ea:	e029      	b.n	8001440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	3304      	adds	r3, #4
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	e024      	b.n	8001440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	3308      	adds	r3, #8
 80013fc:	623b      	str	r3, [r7, #32]
          break;
 80013fe:	e01f      	b.n	8001440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	330c      	adds	r3, #12
 8001406:	623b      	str	r3, [r7, #32]
          break;
 8001408:	e01a      	b.n	8001440 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001412:	2304      	movs	r3, #4
 8001414:	623b      	str	r3, [r7, #32]
          break;
 8001416:	e013      	b.n	8001440 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001420:	2308      	movs	r3, #8
 8001422:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	611a      	str	r2, [r3, #16]
          break;
 800142a:	e009      	b.n	8001440 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800142c:	2308      	movs	r3, #8
 800142e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	615a      	str	r2, [r3, #20]
          break;
 8001436:	e003      	b.n	8001440 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
          break;
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x130>
          break;
 800143e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2bff      	cmp	r3, #255	; 0xff
 8001444:	d801      	bhi.n	800144a <HAL_GPIO_Init+0x13a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	e001      	b.n	800144e <HAL_GPIO_Init+0x13e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3304      	adds	r3, #4
 800144e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d802      	bhi.n	800145c <HAL_GPIO_Init+0x14c>
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	e002      	b.n	8001462 <HAL_GPIO_Init+0x152>
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	3b08      	subs	r3, #8
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	210f      	movs	r1, #15
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	401a      	ands	r2, r3
 8001474:	6a39      	ldr	r1, [r7, #32]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8090 	beq.w	80015b0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a55      	ldr	r2, [pc, #340]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_GPIO_Init+0x2dc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014a8:	4a51      	ldr	r2, [pc, #324]	; (80015f0 <HAL_GPIO_Init+0x2e0>)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a49      	ldr	r2, [pc, #292]	; (80015f4 <HAL_GPIO_Init+0x2e4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00d      	beq.n	80014f0 <HAL_GPIO_Init+0x1e0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a48      	ldr	r2, [pc, #288]	; (80015f8 <HAL_GPIO_Init+0x2e8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x1dc>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a47      	ldr	r2, [pc, #284]	; (80015fc <HAL_GPIO_Init+0x2ec>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_GPIO_Init+0x1d8>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e004      	b.n	80014f2 <HAL_GPIO_Init+0x1e2>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e002      	b.n	80014f2 <HAL_GPIO_Init+0x1e2>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_GPIO_Init+0x1e2>
 80014f0:	2300      	movs	r3, #0
 80014f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f4:	f002 0203 	and.w	r2, r2, #3
 80014f8:	0092      	lsls	r2, r2, #2
 80014fa:	4093      	lsls	r3, r2
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001502:	493b      	ldr	r1, [pc, #236]	; (80015f0 <HAL_GPIO_Init+0x2e0>)
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4937      	ldr	r1, [pc, #220]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	43db      	mvns	r3, r3
 8001532:	4933      	ldr	r1, [pc, #204]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001534:	4013      	ands	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	492d      	ldr	r1, [pc, #180]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	43db      	mvns	r3, r3
 800155a:	4929      	ldr	r1, [pc, #164]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800155c:	4013      	ands	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4923      	ldr	r1, [pc, #140]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	491f      	ldr	r1, [pc, #124]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001584:	4013      	ands	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4919      	ldr	r1, [pc, #100]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4915      	ldr	r1, [pc, #84]	; (8001600 <HAL_GPIO_Init+0x2f0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	3301      	adds	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f aeaf 	bne.w	8001324 <HAL_GPIO_Init+0x14>
  }
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	372c      	adds	r7, #44	; 0x2c
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	10320000 	.word	0x10320000
 80015d8:	10310000 	.word	0x10310000
 80015dc:	10220000 	.word	0x10220000
 80015e0:	10210000 	.word	0x10210000
 80015e4:	10120000 	.word	0x10120000
 80015e8:	10110000 	.word	0x10110000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40011000 	.word	0x40011000
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	807b      	strh	r3, [r7, #2]
 800163e:	4613      	mov	r3, r2
 8001640:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001642:	787b      	ldrb	r3, [r7, #1]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800164e:	e003      	b.n	8001658 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	041a      	lsls	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	611a      	str	r2, [r3, #16]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001674:	887a      	ldrh	r2, [r7, #2]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	041a      	lsls	r2, r3, #16
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43d9      	mvns	r1, r3
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	400b      	ands	r3, r1
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e26c      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8087 	beq.w	80017c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b4:	4b92      	ldr	r3, [pc, #584]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d00c      	beq.n	80016da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c0:	4b8f      	ldr	r3, [pc, #572]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d112      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e>
 80016cc:	4b8c      	ldr	r3, [pc, #560]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d10b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b89      	ldr	r3, [pc, #548]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d06c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x12c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d168      	bne.n	80017c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e246      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x76>
 80016fc:	4b80      	ldr	r3, [pc, #512]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a7f      	ldr	r2, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e02e      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x98>
 8001712:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b78      	ldr	r3, [pc, #480]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a77      	ldr	r2, [pc, #476]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e01d      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0xbc>
 8001736:	4b72      	ldr	r3, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a71      	ldr	r2, [pc, #452]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 8001750:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6a      	ldr	r2, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b68      	ldr	r3, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a67      	ldr	r2, [pc, #412]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fcb6 	bl	80010e0 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fcb2 	bl	80010e0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1fa      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0xe4>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fca2 	bl	80010e0 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fc9e 	bl	80010e0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1e6      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x10c>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d063      	beq.n	8001896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017da:	4b49      	ldr	r3, [pc, #292]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d11c      	bne.n	8001820 <HAL_RCC_OscConfig+0x18c>
 80017e6:	4b46      	ldr	r3, [pc, #280]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d116      	bne.n	8001820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x176>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e1ba      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4939      	ldr	r1, [pc, #228]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	e03a      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_RCC_OscConfig+0x270>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fc57 	bl	80010e0 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff fc53 	bl	80010e0 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e19b      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4927      	ldr	r1, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_RCC_OscConfig+0x270>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fc36 	bl	80010e0 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fc32 	bl	80010e0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e17a      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03a      	beq.n	8001918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d019      	beq.n	80018de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_RCC_OscConfig+0x274>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fc16 	bl	80010e0 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fc12 	bl	80010e0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e15a      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f000 fa9a 	bl	8001e10 <RCC_Delay>
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_OscConfig+0x274>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fbfc 	bl	80010e0 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	e00f      	b.n	800190c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fbf8 	bl	80010e0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d908      	bls.n	800190c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e140      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	42420000 	.word	0x42420000
 8001908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b9e      	ldr	r3, [pc, #632]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e9      	bne.n	80018ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a6 	beq.w	8001a72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b97      	ldr	r3, [pc, #604]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a93      	ldr	r2, [pc, #588]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b91      	ldr	r3, [pc, #580]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b8e      	ldr	r3, [pc, #568]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a8a      	ldr	r2, [pc, #552]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff fbb9 	bl	80010e0 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fbb5 	bl	80010e0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0fd      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x312>
 8001998:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a7a      	ldr	r2, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	e02d      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x334>
 80019ae:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a75      	ldr	r2, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6213      	str	r3, [r2, #32]
 80019ba:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a72      	ldr	r2, [pc, #456]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	e01c      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x356>
 80019d0:	4b6d      	ldr	r3, [pc, #436]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a6c      	ldr	r2, [pc, #432]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e00b      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019ea:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a66      	ldr	r2, [pc, #408]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d015      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb69 	bl	80010e0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fb65 	bl	80010e0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0ab      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ee      	beq.n	8001a12 <HAL_RCC_OscConfig+0x37e>
 8001a34:	e014      	b.n	8001a60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fb53 	bl	80010e0 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff fb4f 	bl	80010e0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e095      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8081 	beq.w	8001b7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d061      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d146      	bne.n	8001b1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fb23 	bl	80010e0 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff fb1f 	bl	80010e0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e067      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d108      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac6:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	492d      	ldr	r1, [pc, #180]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a19      	ldr	r1, [r3, #32]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	4927      	ldr	r1, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff faf3 	bl	80010e0 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff faef 	bl	80010e0 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e037      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x46a>
 8001b1c:	e02f      	b.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fadc 	bl	80010e0 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff fad8 	bl	80010e0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e020      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x498>
 8001b4a:	e018      	b.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e013      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	42420060 	.word	0x42420060

08001b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0d0      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4965      	ldr	r1, [pc, #404]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b8      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	494d      	ldr	r1, [pc, #308]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d040      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d115      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e07f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e073      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06b      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4936      	ldr	r1, [pc, #216]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff fa2c 	bl	80010e0 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff fa28 	bl	80010e0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e053      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d210      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4922      	ldr	r1, [pc, #136]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e032      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d22:	f000 f821 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	490a      	ldr	r1, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1cc>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1d0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f98a 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08002674 	.word	0x08002674
 8001d60:	20000048 	.word	0x20000048
 8001d64:	2000004c 	.word	0x2000004c

08001d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x30>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x36>
 8001d96:	e027      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9a:	613b      	str	r3, [r7, #16]
      break;
 8001d9c:	e027      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0c5b      	lsrs	r3, r3, #17
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dca:	fb02 f203 	mul.w	r2, r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e004      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	613b      	str	r3, [r7, #16]
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	613b      	str	r3, [r7, #16]
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	693b      	ldr	r3, [r7, #16]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	08002684 	.word	0x08002684
 8001e08:	08002694 	.word	0x08002694
 8001e0c:	003d0900 	.word	0x003d0900

08001e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <RCC_Delay+0x34>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <RCC_Delay+0x38>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0a5b      	lsrs	r3, r3, #9
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e2c:	bf00      	nop
  }
  while (Delay --);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1e5a      	subs	r2, r3, #1
 8001e32:	60fa      	str	r2, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f9      	bne.n	8001e2c <RCC_Delay+0x1c>
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000048 	.word	0x20000048
 8001e48:	10624dd3 	.word	0x10624dd3

08001e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e041      	b.n	8001ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff f85a 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f000 fa56 	bl	800233c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e035      	b.n	8001f70 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <HAL_TIM_Base_Start_IT+0x90>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d009      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x4e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d004      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x4e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_TIM_Base_Start_IT+0x94>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d111      	bne.n	8001f5e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d010      	beq.n	8001f6e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5c:	e007      	b.n	8001f6e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40000400 	.word	0x40000400

08001f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0202 	mvn.w	r2, #2
 8001fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f998 	bl	8002304 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f98b 	bl	80022f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f99a 	bl	8002316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0204 	mvn.w	r2, #4
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f972 	bl	8002304 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f965 	bl	80022f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f974 	bl	8002316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d020      	beq.n	8002080 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01b      	beq.n	8002080 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0208 	mvn.w	r2, #8
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f94c 	bl	8002304 <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f93f 	bl	80022f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f94e 	bl	8002316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d020      	beq.n	80020cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0210 	mvn.w	r2, #16
 800209c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2208      	movs	r2, #8
 80020a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f926 	bl	8002304 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f919 	bl	80022f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f928 	bl	8002316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0201 	mvn.w	r2, #1
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fe70 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa6f 	bl	80025f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8f8 	bl	8002328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0220 	mvn.w	r2, #32
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa42 	bl	80025e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_TIM_ConfigClockSource+0x1c>
 800217c:	2302      	movs	r3, #2
 800217e:	e0b4      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x186>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800219e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b8:	d03e      	beq.n	8002238 <HAL_TIM_ConfigClockSource+0xd4>
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021be:	f200 8087 	bhi.w	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c6:	f000 8086 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x172>
 80021ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ce:	d87f      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 80021d0:	2b70      	cmp	r3, #112	; 0x70
 80021d2:	d01a      	beq.n	800220a <HAL_TIM_ConfigClockSource+0xa6>
 80021d4:	2b70      	cmp	r3, #112	; 0x70
 80021d6:	d87b      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 80021d8:	2b60      	cmp	r3, #96	; 0x60
 80021da:	d050      	beq.n	800227e <HAL_TIM_ConfigClockSource+0x11a>
 80021dc:	2b60      	cmp	r3, #96	; 0x60
 80021de:	d877      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 80021e0:	2b50      	cmp	r3, #80	; 0x50
 80021e2:	d03c      	beq.n	800225e <HAL_TIM_ConfigClockSource+0xfa>
 80021e4:	2b50      	cmp	r3, #80	; 0x50
 80021e6:	d873      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d058      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x13a>
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d86f      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 80021f0:	2b30      	cmp	r3, #48	; 0x30
 80021f2:	d064      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x15a>
 80021f4:	2b30      	cmp	r3, #48	; 0x30
 80021f6:	d86b      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d060      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x15a>
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d867      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d05c      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x15a>
 8002204:	2b10      	cmp	r3, #16
 8002206:	d05a      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x15a>
 8002208:	e062      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f000 f96a 	bl	80024f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800222c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	609a      	str	r2, [r3, #8]
      break;
 8002236:	e04f      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f000 f953 	bl	80024f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800225a:	609a      	str	r2, [r3, #8]
      break;
 800225c:	e03c      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	461a      	mov	r2, r3
 800226c:	f000 f8ca 	bl	8002404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2150      	movs	r1, #80	; 0x50
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f921 	bl	80024be <TIM_ITRx_SetConfig>
      break;
 800227c:	e02c      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	f000 f8e8 	bl	8002460 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2160      	movs	r1, #96	; 0x60
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f911 	bl	80024be <TIM_ITRx_SetConfig>
      break;
 800229c:	e01c      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f000 f8aa 	bl	8002404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2140      	movs	r1, #64	; 0x40
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f901 	bl	80024be <TIM_ITRx_SetConfig>
      break;
 80022bc:	e00c      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f000 f8f8 	bl	80024be <TIM_ITRx_SetConfig>
      break;
 80022ce:	e003      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
      break;
 80022d4:	e000      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
	...

0800233c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <TIM_Base_SetConfig+0xc0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d007      	beq.n	8002364 <TIM_Base_SetConfig+0x28>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235a:	d003      	beq.n	8002364 <TIM_Base_SetConfig+0x28>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a28      	ldr	r2, [pc, #160]	; (8002400 <TIM_Base_SetConfig+0xc4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d108      	bne.n	8002376 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a20      	ldr	r2, [pc, #128]	; (80023fc <TIM_Base_SetConfig+0xc0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <TIM_Base_SetConfig+0x52>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002384:	d003      	beq.n	800238e <TIM_Base_SetConfig+0x52>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <TIM_Base_SetConfig+0xc4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d108      	bne.n	80023a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <TIM_Base_SetConfig+0xc0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d103      	bne.n	80023d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f023 0201 	bic.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]
  }
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40012c00 	.word	0x40012c00
 8002400:	40000400 	.word	0x40000400

08002404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f023 0201 	bic.w	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800242e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f023 030a 	bic.w	r3, r3, #10
 8002440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	621a      	str	r2, [r3, #32]
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f023 0210 	bic.w	r2, r3, #16
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800248a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	031b      	lsls	r3, r3, #12
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800249c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	621a      	str	r2, [r3, #32]
}
 80024b4:	bf00      	nop
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024be:	b480      	push	{r7}
 80024c0:	b085      	sub	sp, #20
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	f043 0307 	orr.w	r3, r3, #7
 80024e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b087      	sub	sp, #28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800250c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	021a      	lsls	r2, r3, #8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	431a      	orrs	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4313      	orrs	r3, r2
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	609a      	str	r2, [r3, #8]
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002544:	2302      	movs	r3, #2
 8002546:	e041      	b.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d004      	beq.n	80025a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d10c      	bne.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40000400 	.word	0x40000400

080025e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <__libc_init_array>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	2600      	movs	r6, #0
 8002608:	4d0c      	ldr	r5, [pc, #48]	; (800263c <__libc_init_array+0x38>)
 800260a:	4c0d      	ldr	r4, [pc, #52]	; (8002640 <__libc_init_array+0x3c>)
 800260c:	1b64      	subs	r4, r4, r5
 800260e:	10a4      	asrs	r4, r4, #2
 8002610:	42a6      	cmp	r6, r4
 8002612:	d109      	bne.n	8002628 <__libc_init_array+0x24>
 8002614:	f000 f822 	bl	800265c <_init>
 8002618:	2600      	movs	r6, #0
 800261a:	4d0a      	ldr	r5, [pc, #40]	; (8002644 <__libc_init_array+0x40>)
 800261c:	4c0a      	ldr	r4, [pc, #40]	; (8002648 <__libc_init_array+0x44>)
 800261e:	1b64      	subs	r4, r4, r5
 8002620:	10a4      	asrs	r4, r4, #2
 8002622:	42a6      	cmp	r6, r4
 8002624:	d105      	bne.n	8002632 <__libc_init_array+0x2e>
 8002626:	bd70      	pop	{r4, r5, r6, pc}
 8002628:	f855 3b04 	ldr.w	r3, [r5], #4
 800262c:	4798      	blx	r3
 800262e:	3601      	adds	r6, #1
 8002630:	e7ee      	b.n	8002610 <__libc_init_array+0xc>
 8002632:	f855 3b04 	ldr.w	r3, [r5], #4
 8002636:	4798      	blx	r3
 8002638:	3601      	adds	r6, #1
 800263a:	e7f2      	b.n	8002622 <__libc_init_array+0x1e>
 800263c:	08002698 	.word	0x08002698
 8002640:	08002698 	.word	0x08002698
 8002644:	08002698 	.word	0x08002698
 8002648:	0800269c 	.word	0x0800269c

0800264c <memset>:
 800264c:	4603      	mov	r3, r0
 800264e:	4402      	add	r2, r0
 8002650:	4293      	cmp	r3, r2
 8002652:	d100      	bne.n	8002656 <memset+0xa>
 8002654:	4770      	bx	lr
 8002656:	f803 1b01 	strb.w	r1, [r3], #1
 800265a:	e7f9      	b.n	8002650 <memset+0x4>

0800265c <_init>:
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265e:	bf00      	nop
 8002660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002662:	bc08      	pop	{r3}
 8002664:	469e      	mov	lr, r3
 8002666:	4770      	bx	lr

08002668 <_fini>:
 8002668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266a:	bf00      	nop
 800266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266e:	bc08      	pop	{r3}
 8002670:	469e      	mov	lr, r3
 8002672:	4770      	bx	lr
